AWSTemplateFormatVersion: 2010-09-09
Description: EC2

Parameters:
  EnvName:
    Type: String
    Default: prod

Resources:
  #KeyPair:
  #  Type: AWS::EC2::KeyPair
  #  Properties:
  #    KeyFormat: pem
  #    KeyName: !Sub ${EnvName}-KeyPair
  #    KeyType: ed25519
  #    Tags:
  #      - Key: Name
  #        Value: !Sub ${EnvName}-EC2

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP access
      VpcId:
        Fn::ImportValue: 
          !Sub "${EnvName}-VPC-Output"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 27.131.238.0/24
      Tags:
        - Key: Name
          Value: !Sub ${EnvName}-ALB-SecurityGroup

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      LoadBalancerAttributes: 
        - Key: access_logs.s3.enabled
          Value: false
        - Key: idle_timeout.timeout_seconds
          Value: 60
      Name: !Sub ${EnvName}-ALB
      Scheme: internet-facing
      SecurityGroups: 
        - !Ref ALBSecurityGroup
      Subnets: 
        - Fn::ImportValue: !Sub "${EnvName}-PublicSubnet1a-Output"
        - Fn::ImportValue: !Sub "${EnvName}-PublicSubnet1c-Output"
      Tags: 
        - Key: Name
          Value: !Sub ${EnvName}-ALB

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 6
      HealthyThresholdCount: 5
      IpAddressType: ipv4
      Matcher: 
        HttpCode: "200"
      Name: !Sub "${EnvName}-TargetGroup"
      Port: 80
      Protocol: HTTP
      ProtocolVersion: HTTP1
      TargetGroupAttributes: 
        - Key: stickiness.enabled
          Value: true
        - Key: stickiness.type
          Value: lb_cookie
        - Key: stickiness.lb_cookie.duration_seconds
          Value: 3600
      Targets: 
        - Id: !Ref EC2WEB1
        #- Id: !Ref EC2WEB2
      TargetType: instance
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvName}-VPC-Output"
      Tags:
        - Key: Name
          Value: !Sub ${EnvName}-ALB-TargetGroup

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 443
      Protocol: HTTPS
      Certificates: 
        - CertificateArn:
            Fn::ImportValue: !Sub ${EnvName}-ACM-Output
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            StatusCode: 404
            ContentType: text/plain
            MessageBody: "Not Found"
  
  ALBDomainListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref ALBListener
      Priority: 1
      Actions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      Conditions:
        - Field: host-header
          HostHeaderConfig:
            Values:
              - "ihihihihih123456.com"
              - "www.ihihihihih123456.com"

  Ec2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH access
      VpcId:
        Fn::ImportValue: 
          !Sub "${EnvName}-VPC-Output"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        #- IpProtocol: tcp
        #  FromPort: 22
        #  ToPort: 22
        #  CidrIp: 27.131.238.0/24
      Tags:
        - Key: Name
          Value: !Sub ${EnvName}-EC2-SecurityGroup

  EC2WEB1:
    Type: AWS::EC2::Instance
    Properties:
      DisableApiTermination: false
      EbsOptimized: false
      IamInstanceProfile:
        Fn::ImportValue: !Sub ${EnvName}-EC2WEBProfile-Output
      ImageId: ami-08ce76bae392de7dc
      InstanceInitiatedShutdownBehavior: stop
      InstanceType: t3.nano
      #KeyName: !Ref KeyPair
      Monitoring: false
      SecurityGroupIds: 
        - !Ref Ec2SecurityGroup
      SourceDestCheck: true
      SubnetId:
        Fn::ImportValue:
          !Sub "${EnvName}-PrivateSubnet1a-Output"
      Tags:
        - Key: Name
          Value: !Sub ${EnvName}-EC2-WEB1
      Tenancy: default

  #EC2WEB2:
  #  Type: AWS::EC2::Instance
  #  Properties:
  #    DisableApiTermination: false
  #    EbsOptimized: false
  #    IamInstanceProfile:
  #      Fn::ImportValue: !Sub ${EnvName}-EC2WEBProfile-Output
  #    ImageId: ami-08ce76bae392de7dc
  #    InstanceInitiatedShutdownBehavior: stop
  #    InstanceType: t3.nano
  #    #KeyName: !Ref KeyPair
  #    Monitoring: false
  #    SecurityGroupIds: 
  #      - !Ref Ec2SecurityGroup
  #    SourceDestCheck: true
  #    SubnetId:
  #      Fn::ImportValue:
  #        !Sub "${EnvName}-PrivateSubnet1c-Output"
  #    Tags:
  #      - Key: Name
  #        Value: !Sub ${EnvName}-EC2-WEB2
  #    Tenancy: default

  #EC2WEB1ElasticIP:
  #  Type: AWS::EC2::EIP
  #  Properties:
  #    InstanceId: !Ref EC2WEB1

  #EC2WEB2ElasticIP:
  #  Type: AWS::EC2::EIP
  #  Properties:
  #    InstanceId: !Ref EC2WEB2

Outputs:
  ALBDNSName:
    Value: !GetAtt ALB.DNSName
    Export:
      Name: ALBDNSNameExport
  ALBHostedZoneId:
    Value: !GetAtt ALB.CanonicalHostedZoneID
    Export:
      Name: ALBHostedZoneIdExport
